---
openapi: "3.0.0"
info:
  title: "DELILAH API"
  description: "In this part we go to describe the backend of the Delilah\
    \ application"
  version: "1.0.0"
servers:
- url: "https://virtserver.swaggerhub.com/cristian.montoya/deliha_RestoAPI/1.0.0"
  description: "SwaggerHub API Auto Mocking"
- url: "https://localhost:8000"

  description: "Local Server"
paths:
  /register:
    post:
      tags:
      - "Customers"
      summary: "Create a new user"
      description: "Create a new user in DATABASE"
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              properties:
                username:
                  type: "string"
                  example: "Cristian.montoya9"
                full_name:
                  type: "string"
                  example: "Cristian Cristian.montoya9"
                email:
                  type: "string"
                  example: "cristian.montoya9@gmail.com "
                phone:
                  type: "number"
                  example: 3006091351
                shipping_address:
                  type: "string"
                  example: "Cr 56 n√∫mero 45 A 59 bloque 1 int 102"
                password:
                  type: "string"
                  example: "1234567890"
                es_admin:
                  type: "boolean"
                  example: 0
        required: true
      responses:
        "201":
          description: "User created successfully"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  ok:
                    type: "boolean"
                    example: true
                  message:
                    type: "string"
                    example: "User created successfully"
                  data:
                    $ref: "#/components/schemas/Users"
        "400":
          description: "Missing data"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/400Error"
        "401":
          description: "Previously registered user"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  ok:
                    type: "boolean"
                    example: false
                  message:
                    type: "string"
                    example: "Error, Previously registered user"
  /login:
    post:
      tags:
      - "Customers"
      summary: "Login a user to the work, admin or not admin"
      description: "This login returns a token of JWT(JASON WEB TOKEN) that is used for future logins"
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              properties:
                username:
                  type: "string"
                  example: "peluche12"
                password:
                  type: "string"
                  example: "1234567890"
        required: true
      responses:
        "200":
          description: "Logged successfully"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  ok:
                    type: "boolean"
                    example: true
                  token:
                    type: "string"
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InBlbHVjaGUxMiIsInBhc3N3b3JkIjoiMTIzNDU2Nzg5MCIsImlhdCI6MTYxNDgxMTk1OX0.OPejHfFhFKuEngkSGjfa_9X7xggKaPZW9eROmaq8OUU"
                  message:
                    type: "string"
                    example: "Logged successfully"
        "401":
          description: "Incorrect credentials"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  ok:
                    type: "boolean"
                    example: false
                  message:
                    type: "string"
                    example: "Error, incorrect credentials"
  /products:
    get:
      tags:
      - "Customers"
      summary: "Returns all available products"
      description: "Returns all available products in DATABASE"
      responses:
        "200":
          description: "Successful request"
          content:
            aplication/json:
              schema:
                type: "object"
                properties:
                  ok:
                    type: "boolean"
                    example: true
                  message:
                    type: "string"
                    example: "Successful request"
                  data:
                    type: "array"
                    items:
                      $ref: "#/components/schemas/Products"
        "401":
          description: "Invalid Token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/401Error"
    post:
      tags:
      - "Administrators Only"
      summary: "Create a New Product"
      description: "Create a new product in DATABASE"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductsInput"
        required: true
      responses:
        "201":
          description: "Product created successfully"
          content:
            aplication/json:
              schema:
                type: "object"
                properties:
                  ok:
                    type: "boolean"
                    example: true
                  message:
                    type: "string"
                    example: "Product created successfully"
                  data:
                    $ref: "#/components/schemas/Products"
        "400":
          description: "Missing data"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/400Error"
        "401":
          description: "Invalid Token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/401Error"
        "403":
          description: "Only an admin user can add products"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/403Error"
        "409":
          description: "Previously registered product"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  ok:
                    type: "boolean"
                    example: false
                  message:
                    type: "string"
                    example: "Error, Previously registered product"
  /products/{id}:
    get:
      tags:
      - "Customers"
      summary: "Returns an specific product"
      description: "Returns an specific product"
      parameters:
      - name: "id"
        in: "path"
        description: "Product ID that you need or your go to Search"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "integer"
      responses:
        "200":
          description: "Successful request"
          content:
            aplication/json:
              schema:
                type: "object"
                properties:
                  ok:
                    type: "boolean"
                    example: true
                  message:
                    type: "string"
                    example: "Successful request"
                  data:
                    $ref: "#/components/schemas/Products"
        "401":
          description: "Invalid Token"
          content:
            aplication/json:
              schema:
                $ref: "#/components/schemas/401Error"
        "404":
          description: "Not found"
          content:
            aplication/json:
              schema:
                $ref: "#/components/schemas/404Error"
    put:
      tags:
      - "Administrators Only"
      summary: "Modify a specific product"
      description: "Modify a specific product"
      parameters:
      - name: "id"
        in: "path"
        description: "Product ID you want to modify, search the product to modify"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "integer"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductsInput"
        required: true
      responses:
        "200":
          description: "Successful request"
          content:
            aplication/json:
              schema:
                type: "object"
                properties:
                  ok:
                    type: "boolean"
                    example: true
                  message:
                    type: "string"
                    example: "successful change"
                  data:
                    $ref: "#/components/schemas/Products"
        "400":
          description: "Missing data"
          content:
            aplication/json:
              schema:
                $ref: "#/components/schemas/400Error"
        "401":
          description: "Invalid Token"
          content:
            aplication/json:
              schema:
                $ref: "#/components/schemas/401Error"
        "403":
          description: "Only an admin user can do this"
          content:
            aplication/json:
              schema:
                $ref: "#/components/schemas/403Error"
        "404":
          description: "Not found"
          content:
            aplication/json:
              schema:
                $ref: "#/components/schemas/404Error"
    delete:
      tags:
      - "Administrators Only"
      summary: "Delete a specific product"
      description: "Delete a specific product, only is possible for the administrators"
      parameters:
      - name: "id"
        in: "path"
        description: "Product ID that you want to delete"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "integer"
      responses:
        "200":
          description: "Successful request"
          content:
            aplication/json:
              schema:
                type: "object"
                properties:
                  ok:
                    type: "boolean"
                    example: true
                  message:
                    type: "string"
                    example: "Product deleted"
        "401":
          description: "Invalid Token"
          content:
            aplication/json:
              schema:
                $ref: "#/components/schemas/401Error"
        "403":
          description: "Only an admin user can do this"
          content:
            aplication/json:
              schema:
                $ref: "#/components/schemas/403Error"
        "404":
          description: "Not found"
          content:
            aplication/json:
              schema:
                $ref: "#/components/schemas/404Error"
  /users:
    get:
      tags:
      - "Administrators Only"
      summary: "Returns all users"
      description: "Returns all users from DATABASE"
      responses:
        "200":
          description: "Successful request"
          content:
            aplication/json:
              schema:
                type: "object"
                properties:
                  ok:
                    type: "boolean"
                    example: true
                  message:
                    type: "string"
                    example: "Successful request"
                  data:
                    type: "array"
                    items:
                      $ref: "#/components/schemas/Users"
        "401":
          description: "Invalid Token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/401Error"
        "403":
          description: "Only an admin user can do this"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/403Error"
  /users/{id}:
    get:
      tags:
      - "Administrators Only"
      summary: "Returns a specific user"
      description: "Returns a specific user, user is called for the id"
      parameters:
      - name: "id"
        in: "path"
        description: "User ID that you want to search"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "integer"
      responses:
        "200":
          description: "Successful request"
          content:
            aplication/json:
              schema:
                type: "object"
                properties:
                  ok:
                    type: "boolean"
                    example: true
                  message:
                    type: "string"
                    example: "Successful request"
                  data:
                    $ref: "#/components/schemas/Users"
        "401":
          description: "Invalid Token"
          content:
            aplication/json:
              schema:
                $ref: "#/components/schemas/401Error"
        "403":
          description: "Only an admin user can do this"
          content:
            aplication/json:
              schema:
                $ref: "#/components/schemas/403Error"
        "404":
          description: "Not found"
          content:
            aplication/json:
              schema:
                $ref: "#/components/schemas/404Error"
    put:
      tags:
      - "Administrators Only"
      summary: "Modify a specific user"
      description: "Modify a specific user"
      parameters:
      - name: "id"
        in: "path"
        description: "User ID that you want to modify"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "integer"
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              properties:
                username:
                  type: "string"
                  example: "peluche12"
                full_name:
                  type: "string"
                  example: "carlos velez"
                email:
                  type: "string"
                  example: "cavel1@mail.com "
                phone:
                  type: "number"
                  example: 3192020574
                shipping_address:
                  type: "string"
                  example: "cra  8 # 30-10"
                password:
                  type: "string"
                  example: "1234567890"
                es_admin:
                  type: "boolean"
                  example: 1
        required: true
      responses:
        "200":
          description: "Successful request"
          content:
            aplication/json:
              schema:
                type: "object"
                properties:
                  ok:
                    type: "boolean"
                    example: true
                  message:
                    type: "string"
                    example: "successful change"
                  data:
                    $ref: "#/components/schemas/Users"
        "400":
          description: "Missing data"
          content:
            aplication/json:
              schema:
                $ref: "#/components/schemas/400Error"
        "401":
          description: "Invalid Token"
          content:
            aplication/json:
              schema:
                $ref: "#/components/schemas/401Error"
        "403":
          description: "Only an admin user can do this"
          content:
            aplication/json:
              schema:
                $ref: "#/components/schemas/403Error"
        "404":
          description: "Not found"
          content:
            aplication/json:
              schema:
                $ref: "#/components/schemas/404Error"
    delete:
      tags:
      - "Administrators Only"
      summary: "Delete a specific user"
      description: "Delete a specific user"
      parameters:
      - name: "id"
        in: "path"
        description: "User ID that you want to delete."
        required: true
        style: "simple"
        explode: false
        schema:
          type: "integer"
      responses:
        "200":
          description: "Successful request"
          content:
            aplication/json:
              schema:
                type: "object"
                properties:
                  ok:
                    type: "boolean"
                    example: true
                  message:
                    type: "string"
                    example: "User deleted"
        "401":
          description: "Invalid Token"
          content:
            aplication/json:
              schema:
                $ref: "#/components/schemas/401Error"
        "403":
          description: "Only an admin user can do this"
          content:
            aplication/json:
              schema:
                $ref: "#/components/schemas/403Error"
        "404":
          description: "Not found"
          content:
            aplication/json:
              schema:
                $ref: "#/components/schemas/404Error"
  /orders:
    get:
      tags:
      - "Administrators Only"
      summary: "Returns all orders"
      description: "Returns all users from DATABASE"
      responses:
        "200":
          description: "Successful request"
          content:
            aplication/json:
              schema:
                type: "object"
                properties:
                  ok:
                    type: "boolean"
                    example: true
                  message:
                    type: "string"
                    example: "Successful request"
                  data:
                    type: "array"
                    items:
                      type: "object"
                      properties:
                        order_id:
                          type: "integer"
                          example: 26
                        user_id:
                          type: "integer"
                          example: 7
                        total:
                          type: "number"
                          example: 50000
                        status:
                          type: "string"
                          example: "new"
                        payment_method:
                          type: "string"
                          example: "card"
                        creation_date:
                          type: "string"
                          format: "date-time"
                          example: "2021-02-25T03:41:27.000Z"
                        username:
                          type: "string"
                          example: "Cristian.montoya9"
                        full_name:
                          type: "string"
                          example: "Cristian Cristian.montoya9"
                        email:
                          type: "string"
                          example: "cristian.montoya9@gmail.com"
                        phone:
                          type: "integer"
                          example: 3006091351
                        shipping_address:
                          type: "string"
                          example: "Cr 56 n√∫mero 45 A 59 bloque 1 int 102"
                        products:
                          type: "array"
                          items:
                            type: "object"
                            properties:
                              order_id:
                                type: "integer"
                                example: 26
                              product_id:
                                type: "integer"
                                example: 1
                              quantity:
                                type: "integer"
                                example: 5
                              name:
                                type: "string"
                                example: "cheese"
                              description:
                                type: "string"
                                example: "queso"
                              photo_url:
                                type: "string"
                                example: "photocheese.com"
                              price:
                                type: "number"
                                example: 4000
                              creation_date:
                                type: "string"
                                format: "date-time"
                                example: "2021-02-11T22:52:43.000Z"
                              available:
                                type: "boolean"
                                example: 1
        "401":
          description: "Invalid Token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/401Error"
        "403":
          description: "Invalid payment method"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/403Error"
    post:
      tags:
      - "Customers"
      summary: "Make a new order"
      description: "Here you can make a new order, endpoint for make a new order"
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              properties:
                payment_method:
                  type: "string"
                  example: "card"
                info_order:
                  type: "array"
                  items:
                    type: "object"
                    properties:
                      product_id:
                        type: "integer"
                        example: 3
                      quantity:
                        type: "integer"
                        example: 5
        required: true
      responses:
        "200":
          description: "Generated order"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  ok:
                    type: "boolean"
                    example: true
                  message:
                    type: "string"
                    example: "Generated order"
        "400":
          description: "Missing_data"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/400Error"
        "401":
          description: "Invalid Token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/401Error"
        "403":
          description: "Invalid payment method"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  ok:
                    type: "boolean"
                    example: false
                  message:
                    type: "string"
                    example: "Error, invalid payment method"
        "404":
          description: "Product not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/404Error"
  /orders/{id}:
    get:
      tags:
      - "Customers"
      - "Administrators Only"
      summary: "Returns a specific orders"
      description: "Returns a specific orders, endpoint only is possible for user admin"
      parameters:
      - name: "id"
        in: "path"
        description: "Order ID that you want to search."
        required: true
        style: "simple"
        explode: false
        schema:
          type: "integer"
      responses:
        "200":
          description: "Successful request"
          content:
            aplication/json:
              schema:
                type: "object"
                properties:
                  ok:
                    type: "boolean"
                    example: true
                  message:
                    type: "string"
                    example: "Successful request"
                  data:
                    type: "object"
                    properties:
                      order_id:
                        type: "integer"
                        example: 26
                      user_id:
                        type: "integer"
                        example: 7
                      total:
                        type: "number"
                        example: 50000
                      status:
                        type: "string"
                        example: "new"
                      payment_method:
                        type: "string"
                        example: "card"
                      creation_date:
                        type: "string"
                        format: "date-time"
                        example: "2021-02-25T03:41:27.000Z"
                      username:
                        type: "string"
                        example: "Cristian.montoya9"
                      full_name:
                        type: "string"
                        example: "Cristian Cristian.montoya9"
                      email:
                        type: "string"
                        example: "cristian.montoya9@gmail.com"
                      phone:
                        type: "integer"
                        example: 3006091351
                      shipping_address:
                        type: "string"
                        example: "Cr 56 n√∫mero 45 A 59 bloque 1 int 102"
                      products:
                        type: "array"
                        items:
                          type: "object"
                          properties:
                            order_id:
                              type: "integer"
                              example: 26
                            product_id:
                              type: "integer"
                              example: 1
                            quantity:
                              type: "integer"
                              example: 5
                            name:
                              type: "string"
                              example: "cheese"
                            description:
                              type: "string"
                              example: "queso"
                            photo_url:
                              type: "string"
                              example: "photocheese.com"
                            price:
                              type: "number"
                              example: 4000
                            creation_date:
                              type: "string"
                              format: "date-time"
                              example: "2021-02-11T22:52:43.000Z"
                            available:
                              type: "boolean"
                              example: 1
        "400":
          description: "The user has no order"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  ok:
                    type: "boolean"
                    example: false
                  message:
                    type: "string"
                    example: "Error,  the user has no order"
        "401":
          description: "Invalid Token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/401Error"
        "403":
          description: "this user cannot see other people¬¥s orders"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  ok:
                    type: "boolean"
                    example: false
                  message:
                    type: "string"
                    example: "Error,  this user cannot see other people¬¥s orders"
        "404":
          description: "Order not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/404Error"
    put:
      tags:
      - "Administrators Only"
      summary: "Modify status of a specific order"
      description: "Modify status of a specific order, in this endpoint only admins user make the function"
      parameters:
      - name: "id"
        in: "path"
        description: "Order ID that you want to modify."
        required: true
        style: "simple"
        explode: false
        schema:
          type: "integer"
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              properties:
                status:
                  type: "string"
                  example: "delivered"
        required: true
      responses:
        "200":
          description: "Successful state change"
          content:
            aplication/json:
              schema:
                type: "object"
                properties:
                  ok:
                    type: "boolean"
                    example: true
                  message:
                    type: "string"
                    example: "Successful state change"
        "400":
          description: "Invalid input"
          content:
            aplication/json:
              schema:
                type: "object"
                properties:
                  ok:
                    type: "boolean"
                    example: true
                  message:
                    type: "string"
                    example: "Error, Input invalid"
        "401":
          description: "Invalid Token"
          content:
            aplication/json:
              schema:
                $ref: "#/components/schemas/401Error"
        "403":
          description: "Only an admin user can do this"
          content:
            aplication/json:
              schema:
                $ref: "#/components/schemas/403Error"
        "404":
          description: "Not found"
          content:
            aplication/json:
              schema:
                $ref: "#/components/schemas/404Error"
    delete:
      tags:
      - "Administrators Only"
      summary: "Delete a specific order"
      description: "Modify status of a specific order"
      parameters:
      - name: "id"
        in: "path"
        description: "Order ID that you want to delete."
        required: true
        style: "simple"
        explode: false
        schema:
          type: "integer"
      responses:
        "200":
          description: "Order deleted"
          content:
            aplication/json:
              schema:
                type: "object"
                properties:
                  ok:
                    type: "boolean"
                    example: true
                  message:
                    type: "string"
                    example: "Order deleted"
        "401":
          description: "Invalid Token"
          content:
            aplication/json:
              schema:
                $ref: "#/components/schemas/401Error"
        "403":
          description: "Only an admin user can do this"
          content:
            aplication/json:
              schema:
                $ref: "#/components/schemas/403Error"
        "404":
          description: "Not found"
          content:
            aplication/json:
              schema:
                $ref: "#/components/schemas/404Error"
components:
  schemas:
    Products:
      type: "object"
      properties:
        product_id:
          type: "integer"
          example: 1
        name:
          type: "string"
          example: "cheese"
        description:
          type: "string"
          example: "queso"
        photo_url:
          type: "string"
          example: "photocheese.com"
        price:
          type: "number"
          example: 4000
        creation_date:
          type: "string"
          format: "date-time"
          example: "2021-02-11T22:52:43.000Z"
        available:
          type: "boolean"
          example: 1
    ProductsInput:
      type: "object"
      properties:
        name:
          type: "string"
          example: "cheese"
        description:
          type: "string"
          example: "queso"
        photo_url:
          type: "string"
          example: "photocheese.com"
        price:
          type: "number"
          example: 4000
        available:
          type: "boolean"
          example: 1
    Users:
      type: "object"
      properties:
        id:
          type: "integer"
          example: 7
        username:
          type: "string"
          example: "Cristian.montoya9"
        full_name:
          type: "string"
          example: "Cristian Cristian.montoya9"
        email:
          type: "string"
          example: "cristian.montoya9@gmail.com"
        phone:
          type: "number"
          example: 3006091351
        shipping_address:
          type: "string"
          example: "Cr 56 n√∫mero 45 A 59 bloque 1 int 102"
        password:
          type: "string"
          example: "1234567890"
        es_admin:
          type: "boolean"
          example: 0
        creation_date:
          type: "string"
          format: "date-time"
          example: "2021-02-25T03:17:41.000Z"
    "400Error":
      type: "object"
      properties:
        ok:
          type: "boolean"
          example: false
        message:
          type: "string"
          example: "Error, missing data"
    "401Error":
      type: "object"
      properties:
        ok:
          type: "boolean"
          example: false
        message:
          type: "string"
          example: "Error, invalid Token"
    "403Error":
      type: "object"
      properties:
        ok:
          type: "boolean"
          example: false
        message:
          type: "string"
          example: "Error, only an admin user can do this"
    "404Error":
      type: "object"
      properties:
        ok:
          type: "boolean"
          example: false
        message:
          type: "string"
          example: "Error, not found"